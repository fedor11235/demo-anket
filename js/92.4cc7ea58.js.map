{"version":3,"file":"js/92.4cc7ea58.js","mappings":"yJAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAQF,EAAII,MAAOF,EAAG,MAAM,CAACG,YAAY,SAAS,CAACH,EAAG,OAAO,CAACI,IAAI,iBAAiBN,EAAIO,IACnJ,EACIC,EAAkB,GCKtB,GACAC,MAAA,qBACAC,IAAAA,GACA,OACAC,UAAA,KAEA,EACAC,QAAA,CACAC,aAAAA,CAAAC,GACA,QAAAC,MAAAC,WAAA,CACA,KAAAD,MAAAC,WAAAC,UAAA,GACA,MAAAC,EAAAJ,EAAAK,MAAA,IACA,UAAAC,KAAAF,EAAA,CACA,MAAAG,EAAAC,SAAAC,cAAA,OACAH,EAAAI,SAAA,MACAH,EAAAI,UAAAC,IAAA,gBAEAL,EAAAJ,UAAAG,EACA,KAAAL,MAAAC,WAAAW,YAAAN,EACA,CACA,MACA,MAAAO,EAAA,WACAV,EAAAU,EAAAT,MAAA,IACA,UAAAC,KAAAF,EAAA,CACA,MAAAG,EAAAC,SAAAC,cAAA,OACAH,EAAAI,SAAA,MACAH,EAAAI,UAAAC,IAAA,gBAEAL,EAAAJ,UAAAG,EACA,KAAAL,MAAAC,WAAAW,YAAAN,EACA,CACAQ,cAAA,KAAAlB,UACA,CACA,EACAmB,UAAAA,GACA,MAAAC,EAAA,IAAAC,KACAC,EAAAF,EAAAG,WACAH,EAAAI,aAAA,KAAA/B,OAEA,KAAAO,UAAAyB,aAAA,KACA,MAAAC,GAAA,IAAAL,MAAAM,UACAC,EAAAN,EAAAI,EACAG,EAAAC,OACAC,KAAAC,MAAAJ,EAAA,YACAK,SAAA,OACAC,EAAAJ,OACAC,KAAAC,MAAAJ,EAAA,WACAK,SAAA,OACAE,EAAAL,OAAAC,KAAAC,MAAAJ,EAAA,UAAAK,SACA,EACA,KAEA9B,EAAA0B,EAAA,IAAAK,EAAA,IAAAC,EACA,KAAAjC,cAAAC,GACAyB,EAAA,IACAV,cAAA,KAAAlB,WACA,KAAAI,MAAAC,WAAAC,UAAA,GACA,GACA,IACA,GAEA8B,OAAAA,GACA,KAAA3C,OACA,KAAA0B,YAEA,EACAkB,WAAAA,GACA,KAAA5C,OACAyB,cAAA,KAAAlB,UAEA,GC7EoQ,I,UCQhQsC,GAAY,OACd,EACAlD,EACAS,GACA,EACA,KACA,WACA,MAIF,EAAeyC,EAAiB,O","sources":["webpack://library/./src/components/questions/TimerControl.vue","webpack://library/src/components/questions/TimerControl.vue","webpack://library/./src/components/questions/TimerControl.vue?cf0b","webpack://library/./src/components/questions/TimerControl.vue?1c12"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return (_vm.timer)?_c('div',{staticClass:\"timer\"},[_c('span',{ref:\"timerCount\"})]):_vm._e()\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div v-if=\"timer\" class=\"timer\">\n    <span ref=\"timerCount\"></span>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\"timer\", \"isHeader\"],\n  data() {\n    return {\n      countdown: null,\n    };\n  },\n  methods: {\n    addTimeInHtml(timeString) {\n      if (this.$refs.timerCount) {\n        this.$refs.timerCount.innerHTML = \"\";\n        const timeArray = timeString.split(\"\");\n        for (const timeSymbol of timeArray) {\n          const newDiv = document.createElement(\"div\");\n          if (!timeSymbol.includes(\":\")) {\n            newDiv.classList.add(\"timer-symbol\");\n          }\n          newDiv.innerHTML = timeSymbol;\n          this.$refs.timerCount.appendChild(newDiv);\n        }\n      } else {\n        const timeStringNull = \"00:00:00\";\n        const timeArray = timeStringNull.split(\"\");\n        for (const timeSymbol of timeArray) {\n          const newDiv = document.createElement(\"div\");\n          if (!timeSymbol.includes(\":\")) {\n            newDiv.classList.add(\"timer-symbol\");\n          }\n          newDiv.innerHTML = timeSymbol;\n          this.$refs.timerCount.appendChild(newDiv);\n        }\n        clearInterval(this.countdown);\n      }\n    },\n    startTimer() {\n      const start_time = new Date();\n      const stop_time = start_time.setMinutes(\n        start_time.getMinutes() + this.timer\n      );\n      this.countdown = setInterval(() => {\n        const now = new Date().getTime();\n        const remain = stop_time - now;\n        const hours = String(\n          Math.floor((remain % (1000 * 60 * 60)) / (1000 * 60 * 60))\n        ).padStart(2, \"0\");\n        const min = String(\n          Math.floor((remain % (1000 * 60 * 60)) / (1000 * 60))\n        ).padStart(2, \"0\");\n        const sec = String(Math.floor((remain % (1000 * 60)) / 1000)).padStart(\n          2,\n          \"0\"\n        );\n        const timeString = hours + \":\" + min + \":\" + sec;\n        this.addTimeInHtml(timeString);\n        if (remain < 0) {\n          clearInterval(this.countdown);\n          this.$refs.timerCount.innerHTML = \"\";\n        }\n      }, 1000);\n    },\n  },\n  mounted() {\n    if (this.timer) {\n      this.startTimer();\n    }\n  },\n  deactivated() {\n    if (this.timer) {\n      clearInterval(this.countdown);\n    }\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"~bootstrap\";\n.timer {\n  span {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    color: #444444;\n    font-size: 20px;\n    font-style: normal;\n    font-weight: 600;\n    line-height: 24px;\n    font-variant-numeric: tabular-nums;\n\n    @include media-breakpoint-down(xs) {\n      font-size: 20px;\n      line-height: 24px;\n    }\n\n    :deep(.timer-symbol) {\n      border: 2px solid #1edc1a;\n      border-radius: 4px;\n      padding: 4px 5px;\n    }\n  }\n\n  &.timer--finish {\n    span {\n      color: #ff6c6c;\n    }\n  }\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TimerControl.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TimerControl.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./TimerControl.vue?vue&type=template&id=26597c6e&scoped=true\"\nimport script from \"./TimerControl.vue?vue&type=script&lang=js\"\nexport * from \"./TimerControl.vue?vue&type=script&lang=js\"\nimport style0 from \"./TimerControl.vue?vue&type=style&index=0&id=26597c6e&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"26597c6e\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","timer","staticClass","ref","_e","staticRenderFns","props","data","countdown","methods","addTimeInHtml","timeString","$refs","timerCount","innerHTML","timeArray","split","timeSymbol","newDiv","document","createElement","includes","classList","add","appendChild","timeStringNull","clearInterval","startTimer","start_time","Date","stop_time","setMinutes","getMinutes","setInterval","now","getTime","remain","hours","String","Math","floor","padStart","min","sec","mounted","deactivated","component"],"sourceRoot":""}